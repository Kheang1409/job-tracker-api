version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    depends_on:
      - zookeeper
    networks:
      - app-network

  init-kafka:
    image: bitnami/kafka:latest
    depends_on:
      - kafka
    entrypoint:
      - /bin/sh
      - -c
      - |
        echo "Waiting for Kafka..."; sleep 20
        kafka-topics.sh --create --topic job-tracker-topic --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1
        echo "Kafka topic created."
    networks:
      - app-network

  userservice:
    build:
      context: .
      dockerfile: UserService/Dockerfile
    env_file:
      - .env
    ports:
      - "5001:8080"
    environment:
      - CONNECTION_STRINGS=${CONNECTION_STRINGS}
      - MONGODB_DATABASE_NAME=${MONGODB_DATABASE_NAME}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - JWT_EXPIRY_MINUTES=${JWT_EXPIRY_MINUTES}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - app-network
    depends_on:
      - kafka

  jobservice:
    build:
      context: .
      dockerfile: JobService/Dockerfile
    env_file:
      - .env
    ports:
      - "5002:8080"
    environment:
      - CONNECTION_STRINGS=${CONNECTION_STRINGS}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - JWT_EXPIRY_MINUTES=${JWT_EXPIRY_MINUTES}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - app-network
    depends_on:
      - kafka

  notificationservice:
    build:
      context: .
      dockerfile: NotificationService/Dockerfile
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID}
      - EmailSettings__SmtpServer=${SMTP_SERVER}
      - EmailSettings__Port=${SMTP_PORT}
      - EmailSettings__SenderEmail=${SMTP_SENDER_EMAIL}
      - EmailSettings__SenderPassword=${SMTP_SENDER_PASSWORD}
    networks:
      - app-network
    depends_on:
      - kafka

  apigateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - "5000:8080"
    networks:
      - app-network
    depends_on:
      - userservice
      - jobservice
      - notificationservice

networks:
  app-network:
    driver: bridge